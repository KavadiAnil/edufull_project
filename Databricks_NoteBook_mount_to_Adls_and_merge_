
%python
pass_of_adls=dbutils.secrets.get("secrets_scopes_azure","accesKeyOfadls0edufullnes")





%python
# Unmount the existing mount point
dbutils.fs.unmount("/mnt/projects_adls_correct")

# Mount the storage again
dbutils.fs.mount(
    source="wasbs://data@adls0edufullnes.blob.core.windows.net/",
    mount_point="/mnt/projects_adls_correct",
    extra_configs={"fs.azure.account.key.adls0edufullnes.blob.core.windows.net": pass_of_adls}
)




%python
from datetime import datetime

current_date = datetime.now().strftime("%Y/%m/%d")
display(current_date) 
formate_path = 'dbfs:/mnt/projects_adls_correct/' + current_date





%fs ls dbfs:/mnt/projects_adls_correct/2025/03/19/






%python
# Cell 2
for file in files:
    df_name = "df_" + file.name[:-4]
    globals()[df_name] = spark.read.csv(
        path=file.path, 
        header=True, 
        inferSchema=True
    )
    globals()[df_name].createOrReplaceTempView(df_name + "_view")
    





for file in files:
    df_name_for = "df_" + file.name[:-4]+"_view" 
    print(df_name_for)


%sql
MERGE INTO abd.df_prj_customers AS target
USING df_prj_Customers_view AS source
ON target.CustomerID = source.CustomerID
WHEN MATCHED THEN
  UPDATE SET
    target.FirstName = source.FirstName,
    target.LastName = source.LastName,
    target.Email = source.Email,
    target.Phone = source.Phone,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    CustomerID,
    FirstName,
    LastName,
    Email,
    Phone,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.CustomerID,
    source.FirstName,
    source.LastName,
    source.Email,
    source.Phone,
    source.CreatedDate,
    source.ModifiedDate
  )





%sql
MERGE INTO  abd.df_prj_inventory AS target
USING df_prj_Inventory_view  AS source
ON target.ProductID = source.ProductID
WHEN MATCHED THEN
  UPDATE SET
    target.StockQuantity = source.StockQuantity,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    ProductID,
    StockQuantity,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.ProductID,
    source.StockQuantity,
    source.CreatedDate,
    source.ModifiedDate
  )





%sql
MERGE INTO abd.df_prj_orderitems AS target
USING df_prj_Orderitems_view AS source
ON target.OrderItemID = source.OrderItemID
WHEN MATCHED THEN
  UPDATE SET
    target.OrderID = source.OrderID,
    target.ProductID = source.ProductID,
    target.Quantity = source.Quantity,
    target.TotalPrice = source.TotalPrice,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    OrderItemID,
    OrderID,
    ProductID,
    Quantity,
    TotalPrice,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.OrderItemID,
    source.OrderID,
    source.ProductID,
    source.Quantity,
    source.TotalPrice,
    source.CreatedDate,
    source.ModifiedDate
  )




%sql
MERGE INTO abd.df_prj_orders AS target
USING df_prj_Orders_view AS source
ON target.OrderID = source.OrderID
WHEN MATCHED THEN
  UPDATE SET
    target.CustomerID = source.CustomerID,
    target.OrderDate = source.OrderDate,
    target.OrderStatus = source.OrderStatus,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    OrderID,
    CustomerID,
    OrderDate,
    OrderStatus,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.OrderID,
    source.CustomerID,
    source.OrderDate,
    source.OrderStatus,
    source.CreatedDate,
    source.ModifiedDate
  )





%sql
MERGE INTO abd.df_prj_payments AS target
USING df_prj_Payments_view AS source
ON target.PaymentID = source.PaymentID
WHEN MATCHED THEN
  UPDATE SET
    target.target = 0;

INSERT INTO abd.df_prj_payments
SELECT 
    PaymentID,
    OrderID,
    PaymentAmount,
    PaymentDate,
    CreatedDate,
    ModifiedDate,
    1 
FROM df_prj_Payments_view




%sql
MERGE INTO abd.df_prj_products AS target
USING df_prj_Products_view AS source
ON target.ProductID = source.ProductID
WHEN MATCHED THEN
  UPDATE SET
    target.ProductName = source.ProductName,
    target.Price = source.Price,
    target.Category = source.Category,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    ProductID,
    ProductName,
    Price,
    Category,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.ProductID,
    source.ProductName,
    source.Price,
    source.Category,
    source.CreatedDate,
    source.ModifiedDate
  )





%sql
MERGE INTO abd.df_prj_promotions AS target
USING df_prj_Promotions_view AS source
ON target.PromotionID = source.PromotionID
WHEN MATCHED THEN
  UPDATE SET
    target.PromotionName = source.PromotionName,
    target.Discount = source.Discount,
    target.StartDate = source.StartDate,
    target.EndDate = source.EndDate,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    PromotionID,
    PromotionName,
    Discount,
    StartDate,
    EndDate,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.PromotionID,
    source.PromotionName,
    source.Discount,
    source.StartDate,
    source.EndDate,
    source.CreatedDate,
    source.ModifiedDate
  )




%sql
MERGE INTO abd.df_prj_returns AS target
USING df_prj_Returns_view AS source
ON target.ReturnID = source.ReturnID
WHEN MATCHED THEN
  UPDATE SET
    target.OrderID = source.OrderID,
    target.ProductID = source.ProductID,
    target.ReturnReason = source.ReturnReason,
    target.ReturnDate = source.ReturnDate,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    ReturnID,
    OrderID,
    ProductID,
    ReturnReason,
    ReturnDate,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.ReturnID,
    source.OrderID,
    source.ProductID,
    source.ReturnReason,
    source.ReturnDate,
    source.CreatedDate,
    source.ModifiedDate
  )





%sql
MERGE INTO abd.df_prj_reviews AS target
USING df_prj_Reviews_view AS source
ON target.ReviewID = source.ReviewID
WHEN MATCHED THEN
  UPDATE SET
    target.ProductID = source.ProductID,
    target.CustomerID = source.CustomerID,
    target.Rating = source.Rating,
    target.Comment = source.Comment,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    ReviewID,
    ProductID,
    CustomerID,
    Rating,
    Comment,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.ReviewID,
    source.ProductID,
    source.CustomerID,
    source.Rating,
    source.Comment,
    source.CreatedDate,
    source.ModifiedDate
  )





%sql
MERGE INTO abd.df_prj_shippingdetails AS target
USING df_prj_ShippingDetails_view AS source
ON target.ShippingID = source.ShippingID
WHEN MATCHED THEN
  UPDATE SET
    target.OrderID = source.OrderID,
    target.ShippingMethod = source.ShippingMethod,
    target.TrackingNumber = source.TrackingNumber,
    target.ShipDate = source.ShipDate,
    target.CreatedDate = source.CreatedDate,
    target.ModifiedDate = source.ModifiedDate
WHEN NOT MATCHED THEN
  INSERT (
    ShippingID,
    OrderID,
    ShippingMethod,
    TrackingNumber,
    ShipDate,
    CreatedDate,
    ModifiedDate
  )
  VALUES (
    source.ShippingID,
    source.OrderID,
    source.ShippingMethod,
    source.TrackingNumber,
    source.ShipDate,
    source.CreatedDate,
    source.ModifiedDate
  )




